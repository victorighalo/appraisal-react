{"ast":null,"code":"import _objectSpread from \"/Users/centricgateway/Documents/projects/appraisal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/centricgateway/Documents/projects/appraisal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/centricgateway/Documents/projects/appraisal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { post } from 'services/http';\nimport { saveState } from 'localStorage';\nimport decode from 'jwt-decode';\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService(domain) {\n    _classCallCheck(this, AuthService);\n\n    this.login = function (data) {\n      console.log(post);\n      return post(data, 'api/login').then(function (res) {\n        console.log(res);\n        saveState(res);\n        return res;\n      });\n    };\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"loggedIn\",\n    // login(username, password) {\n    //     // Get a token\n    //     return this.fetch(`${this.domain}/login`, {\n    //         method: 'POST',\n    //         body: JSON.stringify({\n    //             username,\n    //             password\n    //         })\n    //     }).then(res => {\n    //         this.setToken(res.token)\n    //         return Promise.resolve(res);\n    //     })\n    // }\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken();\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n\n      if (this.loggedIn()) {\n        headers['Authorization'] = 'Bearer ' + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/centricgateway/Documents/projects/appraisal/src/services/auth.js"],"names":["post","saveState","decode","AuthService","domain","login","data","console","log","then","res","fetch","bind","getProfile","token","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","removeItem","url","options","headers","loggedIn","_checkStatus","response","json","status","error","Error","statusText"],"mappings":";;;AAAA,SAAQA,IAAR,QAAmB,eAAnB;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,YAAnB;;IAGqBC,W;;;AACjB,uBAAYC,MAAZ,EAAoB;AAAA;;AAAA,SAMpBC,KANoB,GAMZ,UAACC,IAAD,EAAQ;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,aAAOA,IAAI,CAACM,IAAD,EAAM,WAAN,CAAJ,CACNG,IADM,CACA,UAAAC,GAAG,EAAE;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACDT,QAAAA,SAAS,CAACS,GAAD,CAAT;AACA,eAAOA,GAAP;AACF,OALM,CAAP;AAOA,KAfgB;;AAChB,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKP,KAAL,GAAa,KAAKA,KAAL,CAAWO,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;;;AAaD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;+BAEW;AACP;AACA,UAAME,KAAK,GAAG,KAAKC,QAAL,EAAd;AACA,aAAO,CAAC,CAACD,KAAF,IAAW,CAAC,KAAKE,cAAL,CAAoBF,KAApB,CAAnB,CAHO,CAGuC;AACjD;;;mCAEcA,K,EAAO;AAClB,UAAI;AACA,YAAMG,OAAO,GAAGf,MAAM,CAACY,KAAD,CAAtB;;AACA,YAAIG,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACjC,iBAAO,IAAP;AACH,SAFD,MAII,OAAO,KAAP;AACP,OAPD,CAQA,OAAOC,GAAP,EAAY;AACR,eAAO,KAAP;AACH;AACJ;;;6BAEQC,O,EAAS;AACd;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;;+BAEU;AACP;AACA,aAAOC,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;;6BAEQ;AACL;AACAF,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACH;;;iCAEY;AACT,aAAOxB,MAAM,CAAC,KAAKa,QAAL,EAAD,CAAb;AACH;;;;;;;;;;;;;gBAGKY,G,EAAKC,O,EAAS;AAChB;AACA,UAAMC,OAAO,GAAG;AACZ,kBAAU,kBADE;AAEZ,wBAAgB;AAFJ,OAAhB;;AAKA,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjBD,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAY,KAAKd,QAAL,EAAvC;AACH;;AAED,aAAOJ,KAAK,CAACgB,GAAD;AACRE,QAAAA,OAAO,EAAPA;AADQ,SAELD,OAFK,EAAL,CAIFnB,IAJE,CAIG,KAAKsB,YAJR,EAKFtB,IALE,CAKG,UAAAuB,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OALX,CAAP;AAMH,K;;;iCAEYD,Q,EAAU;AACnB;AACA,UAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAAhD,EAAqD;AACjD,eAAOF,QAAP;AACH,OAFD,MAEO;AACH,YAAIG,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,QAAQ,CAACK,UAAnB,CAAZ;AACAF,QAAAA,KAAK,CAACH,QAAN,GAAiBA,QAAjB;AACA,cAAMG,KAAN;AACH;AACJ;;;;;;SApGgBhC,W","sourcesContent":["import {post} from 'services/http';\nimport {saveState} from 'localStorage';\nimport decode from 'jwt-decode';\n\n\nexport default class AuthService {\n    constructor(domain) {\n        this.fetch = this.fetch.bind(this)\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login = (data)=>{\n        console.log(post)\n        return post(data,'api/login')\n        .then( res=>{\n            console.log(res)\n           saveState(res);\n           return res;\n        })\n\n       }\n\n    // login(username, password) {\n    //     // Get a token\n    //     return this.fetch(`${this.domain}/login`, {\n    //         method: 'POST',\n    //         body: JSON.stringify({\n    //             username,\n    //             password\n    //         })\n    //     }).then(res => {\n    //         this.setToken(res.token)\n    //         return Promise.resolve(res);\n    //     })\n    // }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken()\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}