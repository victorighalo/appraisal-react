{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/centricgateway/Documents/projects/appraisal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/centricgateway/Documents/projects/appraisal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar NormalizedMessage =\n/*#__PURE__*/\nfunction () {\n  function NormalizedMessage(data) {\n    _classCallCheck(this, NormalizedMessage);\n\n    this.type = data.type;\n    this.code = data.code;\n    this.severity = data.severity;\n    this.content = data.content;\n    this.file = data.file;\n    this.line = data.line;\n    this.character = data.character;\n  }\n\n  _createClass(NormalizedMessage, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        type: this.type,\n        code: this.code,\n        severity: this.severity,\n        content: this.content,\n        file: this.file,\n        line: this.line,\n        character: this.character\n      };\n    }\n  }, {\n    key: \"isDiagnosticType\",\n    value: function isDiagnosticType() {\n      return NormalizedMessage.TYPE_DIAGNOSTIC === this.type;\n    }\n  }, {\n    key: \"isLintType\",\n    value: function isLintType() {\n      return NormalizedMessage.TYPE_LINT === this.type;\n    }\n  }, {\n    key: \"getFormattedCode\",\n    value: function getFormattedCode() {\n      return this.isDiagnosticType() ? 'TS' + this.code : this.code;\n    }\n  }, {\n    key: \"isErrorSeverity\",\n    value: function isErrorSeverity() {\n      return this.severity === NormalizedMessage.SEVERITY_ERROR;\n    }\n  }, {\n    key: \"isWarningSeverity\",\n    value: function isWarningSeverity() {\n      return this.severity === NormalizedMessage.SEVERITY_WARNING;\n    }\n  }], [{\n    key: \"createFromJSON\",\n    value: function createFromJSON(json) {\n      return new NormalizedMessage(json);\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(messageA, messageB) {\n      if (!(messageA instanceof NormalizedMessage)) {\n        return -1;\n      }\n\n      if (!(messageB instanceof NormalizedMessage)) {\n        return 1;\n      }\n\n      return NormalizedMessage.compareTypes(messageA.type, messageB.type) || NormalizedMessage.compareOptionalStrings(messageA.file, messageB.file) || NormalizedMessage.compareSeverities(messageA.severity, messageB.severity) || NormalizedMessage.compareNumbers(messageA.line, messageB.line) || NormalizedMessage.compareNumbers(messageA.character, messageB.character) || // code can be string (lint failure) or number (typescript error) - should the following line cater for this in some way?\n      NormalizedMessage.compareOptionalStrings(messageA.code, messageB.code) || NormalizedMessage.compareOptionalStrings(messageA.content, messageB.content) || 0\n      /* EqualTo */\n      ;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(messageA, messageB) {\n      return this.compare(messageA, messageB) === 0;\n    }\n  }, {\n    key: \"deduplicate\",\n    value: function deduplicate(messages) {\n      return messages.sort(NormalizedMessage.compare).filter(function (message, index) {\n        return index === 0 || !NormalizedMessage.equals(message, messages[index - 1]);\n      });\n    }\n  }, {\n    key: \"compareTypes\",\n    value: function compareTypes(typeA, typeB) {\n      var priorities = [typeA, typeB].map(function (type) {\n        return [NormalizedMessage.TYPE_LINT\n        /* 0 */\n        , NormalizedMessage.TYPE_DIAGNOSTIC\n        /* 1 */\n        ].indexOf(type);\n      });\n      return priorities[0] - priorities[1];\n    }\n  }, {\n    key: \"compareSeverities\",\n    value: function compareSeverities(severityA, severityB) {\n      var priorities = [severityA, severityB].map(function (type) {\n        return [NormalizedMessage.SEVERITY_WARNING\n        /* 0 */\n        , NormalizedMessage.SEVERITY_ERROR\n        /* 1 */\n        ].indexOf(type);\n      });\n      return priorities[0] - priorities[1];\n    }\n  }, {\n    key: \"compareOptionalStrings\",\n    value: function compareOptionalStrings(stringA, stringB) {\n      if (stringA === stringB) {\n        return 0;\n      }\n\n      if (stringA === undefined || stringA === null) {\n        return -1;\n      }\n\n      if (stringB === undefined || stringB === null) {\n        return 1;\n      }\n\n      return stringA.toString().localeCompare(stringB.toString());\n    }\n  }, {\n    key: \"compareNumbers\",\n    value: function compareNumbers(numberA, numberB) {\n      if (numberA === numberB) {\n        return 0;\n      }\n\n      if (numberA === undefined || numberA === null) {\n        return -1;\n      }\n\n      if (numberB === undefined || numberB === null) {\n        return 1;\n      }\n\n      return numberA - numberB;\n    }\n  }]);\n\n  return NormalizedMessage;\n}();\n\nNormalizedMessage.TYPE_DIAGNOSTIC = 'diagnostic';\nNormalizedMessage.TYPE_LINT = 'lint'; // severity types\n\nNormalizedMessage.SEVERITY_ERROR = 'error';\nNormalizedMessage.SEVERITY_WARNING = 'warning';\nexports.NormalizedMessage = NormalizedMessage;","map":null,"metadata":{},"sourceType":"script"}