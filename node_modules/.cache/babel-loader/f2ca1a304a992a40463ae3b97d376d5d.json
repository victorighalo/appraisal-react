{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar os = require(\"os\");\n\nvar codeFrame = require(\"babel-code-frame\");\n\nvar chalk_1 = require(\"chalk\");\n\nvar fs = require(\"fs\");\n\nvar FsHelper_1 = require(\"../FsHelper\");\n/**\n * Create new code frame formatter.\n *\n * @param options Options for babel-code-frame - see https://www.npmjs.com/package/babel-code-frame\n * @returns {codeframeFormatter}\n */\n\n\nfunction createCodeframeFormatter(options) {\n  return function codeframeFormatter(message, useColors) {\n    var colors = new chalk_1.default.constructor({\n      enabled: useColors\n    });\n    var messageColor = message.isWarningSeverity() ? colors.bold.yellow : colors.bold.red;\n    var positionColor = colors.dim;\n    var file = message.file;\n    var source = file && FsHelper_1.FsHelper.existsSync(file) && fs.readFileSync(file, 'utf-8');\n    var frame = '';\n\n    if (source) {\n      frame = codeFrame(source, message.line, // Assertion: `codeFrame` allows passing undefined, typings are incorrect\n      message.character, Object.assign({}, options || {}, {\n        highlightCode: useColors\n      })).split('\\n').map(function (str) {\n        return '  ' + str;\n      }).join(os.EOL);\n    }\n\n    return messageColor(message.severity.toUpperCase() + ' in ' + message.file) + os.EOL + positionColor(message.line + ':' + message.character) + ' ' + message.content + (frame ? os.EOL + frame : '');\n  };\n}\n\nexports.createCodeframeFormatter = createCodeframeFormatter;","map":null,"metadata":{},"sourceType":"script"}